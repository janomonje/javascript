
/////////////////////////////////////////////////
/////////////////////////////////////////////////
// LECTURES
/*
//Parsing
console.log(Number.parseInt('30px',10));


console.log(Number.parseInt('2.5rem')); // Decimal part gets discarded
console.log(Number.parseFloat('2.5rem'));

// To check if value is not a number
console.log(Number.isNaN(20)); //false
console.log(Number.isNaN(+'20x')); //true

console.log(Number.isNaN(23/0)); //false

// best way to check if value is a number
console.log(Number.isFinite(20)); //true
console.log(Number.isFinite('20')); //false

//
console.log(Number.isInteger(23));
console.log(Number.isInteger(23.0));



//////////////////////////////////////////////////////////////////////////////////

// Math and rounding
console.log(Math.sqrt(25));
console.log(25 ** (1 / 2)); // same
console.log(8 ** (1 / 3)); // cubic root

// MAX
console.log(Math.max(5, 69, 12, 5, 74));
console.log(Math.max(5, 18, '23', 11, 2));

// Min
console.log(Math.min(5, 18, '23', 9));

// Constants
console.log(Math.PI * Number.parseFloat('10px') ** 2);

// Random

// randon die roll
console.log(Math.trunc(Math.random() * 6 + 1));

const randomInt = (min, max) => Math.floor(math.random() * (max - min) + 1); // generate random number between range

//Rounding Integers
console.log(Math.trunc(23.3)); //23
console.log(Math.round(23.6)); //24

console.log(Math.ceil(23.6)); //24
console.log(Math.ceil(23.3)); //24

console.log(Math.floor(23.6)); //23
console.log(Math.floor(23.3)); //23

// Rounding decimals
console.log((2.7).toFixed(0)); // no decimal places
console.log((2.7).toFixed(3)); // three decimal places
console.log((2.7569).toFixed(2)); // two decimal places

///////////////////////////////////////////////////////////////////////////////////////////////////

// Reminder Operator

console.log(5 % 2); // 1

const isEven = number => (number % 2 === 0 ? 'Is even' : 'Is odd');
console.log(isEven(5));

/////////////////////////////////////////////////////////////////////////////////////////////////////

//Numeric Separtor

// 287,460,000,000
const diameter = 287_460_000_000;
console.log(diameter);

const priceInCent = 345_99;
console.log(priceInCent);

const transferFee1 = 15_00;
const transferFee2 = 1_500;

// const PI = 3._1415; error

///////////////////////////////////////////////////////////////////////////////////////////////////////

// Working with BigInt
console.log(2 ** 53 - 1);
console.log(Number.MAX_SAFE_INTEGER);

console.log(4584654684645464316841516168410538464n);
console.log(BigInt(45584822354));

// Operations
console.log(10000n + 10000n);

const huge = 7739947756399994774n;
const number = 22;
console.log(huge * BigInt(number));

// Exceptions

console.log(20n > 15);
console.log(20n === 20);
console.log(typeof 20n);
console.log(huge + ' is relly big.');

// Divisions

console.log(10n / 3n);
console.log(10 / 3);

////////////////////////////////////////////////////////////////////////////////////////////////////////////



// DATES AND TIME

// Create date

const now = new Date();
console.log(now);

console.log(new Date('Aug 02 2020 18:05:45'));
console.log(new Date('December 24, 2015'));

console.log(new Date(account1.movements[0]));


console.log(new Date(2031, 10, 19, 15, 23, 5));


console.log(new Date(0));
console.log(new Date(3*24*60*60*1000)); // time stamp of this day



// Working with dates

const future = new Date(2037, 10, 19, 15, 23);
console.log(future);
console.log(future.getFullYear());
console.log(future.getMonth());
console.log(future.getDay());
console.log(future.getHours());
console.log(future.getMinutes());
console.log(future.getSeconds());
console.log(future.toISOString());

console.log(future.getTime());

console.log(new Date(2142249780000));

console.log(Date.now()); // current time stamp

future.setFullYear(2040);
console.log(future);

const future = new Date(2037, 10, 19, 15, 23);
console.log(+future);

const daysPassed = (date1, date2) =>
  Math.abs(date2 - date1) / (1000 * 60 * 60 * 24);
const day1 = daysPassed(new Date(2037, 3, 14), new Date(2037, 3, 24, 10, 8));

console.log(day1);

/////////////////////////////////////////////////////////////////////////////////////////////////

// Internationalizing numbers

const num = 38884764.23;

const option = {
  style: 'currency',
  unit: 'celsius',
  currency: 'EUR',
  // useGrouping:false,
};

console.log('US: ', new Intl.NumberFormat('en-US', option).format(num));
console.log('Germany: ', new Intl.NumberFormat('de-DE', option).format(num));
console.log('Syria: ', new Intl.NumberFormat('ar-SY', option).format(num));
console.log(
  navigator.language,
  new Intl.NumberFormat(navigator.language, option).format(num)
);

////////////////////////////////////////////////////////////////////////////

// Timers

const ingredients = ['pineapple', 'feta', 'spinach'];
const pizzaTimer = setTimeout(
  (ingredient1, ingredient2) =>
    console.log(`Here is your pizza with ${ingredient1} and ${ingredient2}`),
  3000,
  ...ingredients
); // amount of miliseconds
console.log('waiting');
if (ingredients.includes('spinach')) clearTimeout(pizzaTimer);

// setInterval

// shows the date every second
const time = setInterval(() => {
  const now = new Date();
  const hour = now.getHours();
  const min = now.getMinutes();
  const sec = now.getSeconds();

  const zero = num => (num < 10 ? `0${num}` : num);

  console.log(zero(hour) + ':' + zero(min) + ':' + zero(sec));
}, 1000);


// I have calculated the amount of transaction per account
const countingTransactions = accs => {
  accs.forEach(function (acc) {
    acc.numberOfTransaction = acc.movements.length;
  });
};
countingTransactions(accounts);

////////////////////////////////////////////////
// 1. Calculating total deposit of money in the bank

const bankDepositSum = accounts
  .flatMap(acc => acc.movements)
  .filter(mov => mov > 0)
  .reduce((acc, mov) => acc + mov, 0);
console.log(bankDepositSum);

// 2. number of deposits bigger or equal to 1000

const numDeposit1000 = accounts
  .flatMap(acc => acc.movements)
  .filter(mov => mov >= 1000).length;
console.log(numDeposit1000);

const sameWithReduce = accounts
  .flatMap(acc => acc.movements)
  .reduce(
    (counter, currValue) => (currValue >= 1000 ? counter + 1 : counter),
    0
  );
console.log(sameWithReduce);

// 3. Creating an object
const sums = accounts
  .flatMap(acc => acc.movements)
  .reduce(
    (sum, mov) => {
      mov > 0 ? (sum.deposits += mov) : (sum.withdrawals += mov);
      return sum;
    },
    { deposits: 0, withdrawals: 0 }
  );

console.log(sums);
*/